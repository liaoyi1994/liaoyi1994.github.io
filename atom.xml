<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的博客</title>
  
  <subtitle>一生挚爱妹子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.html.hb.com/"/>
  <updated>2019-12-25T08:43:07.621Z</updated>
  <id>http://www.html.hb.com/</id>
  
  <author>
    <name>廖义</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>反向代理解决跨域</title>
    <link href="http://www.html.hb.com/nginx/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/"/>
    <id>http://www.html.hb.com/nginx/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/</id>
    <published>2019-03-05T07:17:22.000Z</published>
    <updated>2019-12-25T08:43:07.621Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间遇到一个前后端分离的项目，服务端代码在服务器上，而我不能直接把前端代码发布到服务器上。在调试时发现有跨域的问题，决定使用nginx反向代理来解决跨域问题。<br>修改conf/nginx.conf中的配置即可。修改后的配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        <span class="comment"># 修改默认进入的页面</span></span><br><span class="line">        index  login.html login.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   location /feasycom/ &#123;</span><br><span class="line">   proxy_pass   https://**.**.***.*:****/;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nginx启动后,自己的前端项目访问路径为：localhost/xxx.html。 服务端API调用路径为：localhost/feasycom/xxx</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间遇到一个前后端分离的项目，服务端代码在服务器上，而我不能直接把前端代码发布到服务器上。在调试时发现有跨域的问题，决定使用nginx反向代理来解决跨域问题。&lt;br&gt;修改conf/nginx.conf中的配置即可。修改后的配置如下：&lt;/p&gt;
&lt;figure class=
      
    
    </summary>
    
    
    
      <category term="Nginx" scheme="http://www.html.hb.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>BLE蓝牙开发框架FastBLE的使用</title>
    <link href="http://www.html.hb.com/android/BLE%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6FastBLE%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.html.hb.com/android/BLE%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6FastBLE%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2019-03-05T06:46:49.000Z</published>
    <updated>2019-12-25T08:43:05.397Z</updated>
    
    <content type="html"><![CDATA[<p>首次使用android进行蓝牙BLE开发，在百度上查阅了大量资料，然后发现了FastBLE开源框架就决定试试，以下为在使用FastBLE开发的过程。<br>首先遇到的问题是权限问题，照着 开发文档上的获取权限的步骤来做，却发现无法获取到权限。在百度上查询了一些获取权限的资料都比较复杂，所以使用了AndroidACP开源框架来获取权限，具体步骤如下：</p><ol><li>在build.gradle文件下的dependencies中添加如下依赖</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'com.mylhyl:acp:1.2.0'</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在Activity中添加如下代码</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Acp.getInstance(this).request(new AcpOptions.Builder()</span><br><span class="line">                .setPermissions(Manifest.permission.BLUETOOTH</span><br><span class="line">                        , Manifest.permission.BLUETOOTH_ADMIN</span><br><span class="line">                        , Manifest.permission.ACCESS_COARSE_LOCATION</span><br><span class="line">                        , Manifest.permission.ACCESS_FINE_LOCATION)</span><br><span class="line">                .build(),</span><br><span class="line">        new <span class="function"><span class="title">AcpListener</span></span>() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void <span class="function"><span class="title">onGranted</span></span>() &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onDenied(List&lt;String&gt; permissions) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>setPermissions中的内容与 AndroidManifest.xml中添加权限所对应</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.BLUETOOTH"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.BLUETOOTH_ADMIN"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.ACCESS_COARSE_LOCATION"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.ACCESS_FINE_LOCATION"</span> /&gt;</span><br></pre></td></tr></table></figure><p>这样就获取权限成功了。然后FastBLE的使用，首先是导包，可以下载jar包导入或者使用maven，Gradle方式导入。然后再是初始化与设置扫描的配置，具体如下（还有其他配置没有设置，因为这些基本上已经够用了）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BleManager.getInstance().init(getApplication());</span><br><span class="line">        BleManager.getInstance()</span><br><span class="line">                .enableLog(<span class="literal">true</span>)</span><br><span class="line">                .setReConnectCount(1, 5000)</span><br><span class="line">                .setSplitWriteNum(20)</span><br><span class="line">                .setConnectOverTime(10000)</span><br><span class="line">                .setOperateTimeout(5000);</span><br><span class="line">        // BleManager.getInstance().enableBluetooth();</span><br><span class="line">        BleScanRuleConfig scanRuleConfig = new BleScanRuleConfig.Builder()</span><br><span class="line">                .setScanTimeOut(10000)              // 扫描超时时间，可选，默认10秒；小于等于0表示不限制扫描时间</span><br><span class="line">                .build();</span><br><span class="line">        BleManager.getInstance().initScanRule(scanRuleConfig);</span><br></pre></td></tr></table></figure><p>再就是扫描设备，因为业务需求的原因，我在开始扫描之前首先断开了所有的连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 断开所有连接</span><br><span class="line">BleManager.getInstance().disconnectAllDevice();</span><br><span class="line">BleManager.getInstance().scan(new <span class="function"><span class="title">BleScanCallback</span></span>() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onScanFinished(List&lt;BleDevice&gt; list) &#123;</span><br><span class="line">        // 扫描完成</span><br><span class="line">        button.setText(<span class="string">"开始扫描"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onScanStarted(boolean b) &#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"开始扫描"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onScanning(BleDevice bleDevice) &#123;</span><br><span class="line">        // 扫描到一个之前没有扫到过的设备</span><br><span class="line">        <span class="keyword">if</span>(bleDevice.getName() != null)&#123;</span><br><span class="line">            devices.add(bleDevice);</span><br><span class="line">            adapter.add(bleDevice);</span><br><span class="line">            listView.setAdapter(adapter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果不需要再扫描，可以使用BleManager.getInstance().cancelScan()来中断扫描操作，这里需要注意的是，当执行中断扫描的方法后，会自动执行onScanFinished()方法，参数list是扫描出的所有设备。<br>然后是连接的步骤，连接有两种方式，一种是通过BleDevice来连接，另一种是通过Mac地址来连接。我这里使用的是第二种。使用ArrayAdapater与ListView来显示所有的扫描的设备，给LibeView监听事件，获取对应的设备的mac地址，然后使用BleManager.getInstance().connect()来连接，然后重写其中的方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">BleManager.getInstance().connect(devices.get(position).getMac(), new <span class="function"><span class="title">BleGattCallback</span></span>() &#123;</span><br><span class="line">    // 开始连接</span><br><span class="line">    @Override</span><br><span class="line">    public void <span class="function"><span class="title">onStartConnect</span></span>() &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"开始连接"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 连接失败</span><br><span class="line">    @Override</span><br><span class="line">    public void onConnectFail(BleDevice bleDevice, BleException e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"连接不成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 连接成功并发现了服务</span><br><span class="line">    @Override</span><br><span class="line">    public void onConnectSuccess(final BleDevice bleDevice, BluetoothGatt gatt, int status) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"连接成功并发现服务。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 连接断开</span><br><span class="line">    @Override</span><br><span class="line">    public void onDisConnected(boolean isActiveDisConnected, BleDevice bleDevice, BluetoothGatt gatt, int status) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"连接断开"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在onConnectSuccess方法中有三个参数，最主要的是BluetoothGatt，BluetoothGatt 是BLE蓝牙开发的核心，通过BluetoothGatt 可以获取到uuid，然后通过uuid来打开通知(通知也有两种方式，看需要那种）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">List&lt;BluetoothGattService&gt; serviceList = gatt.getServices();</span><br><span class="line"><span class="keyword">for</span> (BluetoothGattService service : serviceList) &#123;</span><br><span class="line">    final String uuid_service = service.getUuid().toString();</span><br><span class="line">    <span class="keyword">if</span>(uuid_service.contains(<span class="string">"fff0"</span>))&#123;</span><br><span class="line">        List&lt;BluetoothGattCharacteristic&gt; characteristicList = service.getCharacteristics();</span><br><span class="line">        <span class="keyword">for</span> (BluetoothGattCharacteristic characteristic : characteristicList) &#123;</span><br><span class="line">            final String uuid_chara = characteristic.getUuid().toString();</span><br><span class="line">            <span class="keyword">if</span>(uuid_service.contains(<span class="string">"fff"</span>)) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(100);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                BleManager.getInstance().indicate(</span><br><span class="line">                        bleDevice,</span><br><span class="line">                        uuid_service,</span><br><span class="line">                        uuid_chara,</span><br><span class="line">                        new <span class="function"><span class="title">BleIndicateCallback</span></span>() &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public void <span class="function"><span class="title">onIndicateSuccess</span></span>() &#123;</span><br><span class="line">                                // 打开通知操作成功</span><br><span class="line">                                Log.e(<span class="string">"打开通知成功"</span>, <span class="string">"uuid_service : "</span> + uuid_service + <span class="string">" uuid_chara:  "</span> + uuid_chara);</span><br><span class="line">                                MyBleDevice uuid = new MyBleDevice(devices.get(position), uuid_service, uuid_chara, uuid_chara.replace(<span class="string">"fff1"</span>,<span class="string">"fff2"</span>));</span><br><span class="line">                                uuids.add(uuid);</span><br><span class="line">                                <span class="built_in">read</span>(uuid);</span><br><span class="line">                                try &#123;</span><br><span class="line">                                    Thread.sleep(100);</span><br><span class="line">                                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                                    e.printStackTrace();</span><br><span class="line">                                &#125;</span><br><span class="line">                                write(<span class="string">"发送测试数据"</span>.getBytes(),uuid);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            @Override</span><br><span class="line">                            public void onIndicateFailure(BleException exception) &#123;</span><br><span class="line">                                // 打开通知操作失败</span><br><span class="line">                                Log.e(TAG, <span class="string">"打开通知失败"</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            @Override</span><br><span class="line">                            public void onCharacteristicChanged(byte[] data) &#123;</span><br><span class="line">                                // 打开通知后，设备发过来的数据将在这里出现</span><br><span class="line">                                Log.e(<span class="string">"接收到的数据"</span>, new String(data));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在onIndicateSuccess()方法中进行保存对应的uuid_service与uuid_chara，然后通过BleDevice，uuid_service，uuid_chara就可以进行数据读写了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// 读取数据</span><br><span class="line">private void <span class="built_in">read</span>(MyBleDevice uuid) &#123;</span><br><span class="line">    BleManager.getInstance().<span class="built_in">read</span>(</span><br><span class="line">            devices.get(position),</span><br><span class="line">            uuid.getUuid_service(),</span><br><span class="line">            uuid.getUuid_chara_rec(),</span><br><span class="line">            new <span class="function"><span class="title">BleReadCallback</span></span>() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onReadSuccess(byte[] data) &#123;</span><br><span class="line">                    Log.e(<span class="string">"读取特征值成功"</span>, data.length + <span class="string">""</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public void onReadFailure(BleException exception) &#123;</span><br><span class="line">                    Log.e(<span class="string">"读取特征值失败"</span>, exception.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br><span class="line">// 写入数据</span><br><span class="line">private void write(byte[] data,MyBleDevice uuid) &#123;</span><br><span class="line">    BleManager.getInstance().write(</span><br><span class="line">            devices.get(position),</span><br><span class="line">            uuid.getUuid_service(),</span><br><span class="line">            uuid.getUuid_chara_send(),</span><br><span class="line">            data,</span><br><span class="line">            new <span class="function"><span class="title">BleWriteCallback</span></span>() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onWriteSuccess(int current, int total, byte[] justWrite) &#123;</span><br><span class="line">                    // 发送数据到设备成功（分包发送的情况下，可以通过方法中返回的参数可以查看发送进度）</span><br><span class="line">                    Log.e(TAG, <span class="string">"发送数据到设备成功"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public void onWriteFailure(BleException exception) &#123;</span><br><span class="line">                    // 发送数据到设备失败</span><br><span class="line">                    Log.e(TAG, <span class="string">"发送数据到设备成功"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>百度网盘下载链接：<a href="https://pan.baidu.com/s/15dDpzPMEXGD6Q5ejpr_fXA" target="_blank" rel="noopener">https://pan.baidu.com/s/15dDpzPMEXGD6Q5ejpr_fXA</a><br>提取码：jycs</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首次使用android进行蓝牙BLE开发，在百度上查阅了大量资料，然后发现了FastBLE开源框架就决定试试，以下为在使用FastBLE开发的过程。&lt;br&gt;首先遇到的问题是权限问题，照着 开发文档上的获取权限的步骤来做，却发现无法获取到权限。在百度上查询了一些获取权限的资料
      
    
    </summary>
    
    
    
      <category term="Android" scheme="http://www.html.hb.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>TCP通讯指定客户端接收数据的端口 Socket</title>
    <link href="http://www.html.hb.com/tcp/TCP%E9%80%9A%E8%AE%AF%E6%8C%87%E5%AE%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E6%94%B6%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AB%AF%E5%8F%A3/"/>
    <id>http://www.html.hb.com/tcp/TCP%E9%80%9A%E8%AE%AF%E6%8C%87%E5%AE%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E6%94%B6%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AB%AF%E5%8F%A3/</id>
    <published>2019-01-01T07:27:45.000Z</published>
    <updated>2019-12-25T08:43:06.461Z</updated>
    
    <content type="html"><![CDATA[<p>使用Socket实现TCP通讯时，服务端响应数据给客户端时，客户端接收数据的端口是随机的。如果想指定客户端接收数据的端口，那么可以在客户端创建Socket时使用如下API：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket = new Socket(ip, serverPort,InetAddress.getByName(getLocalIpAddress()),clientPort);</span><br></pre></td></tr></table></figure><p>getLocalIpAddress()为我自定义的获取本地ip的方法，也可以将这个方法替换成”192.168.0.123″(客户端的ip）即可。<br>而不是使用如下API创建Socket，该API生成的Socket中localPort为随机的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket = new Socket(ip, serverPort);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用Socket实现TCP通讯时，服务端响应数据给客户端时，客户端接收数据的端口是随机的。如果想指定客户端接收数据的端口，那么可以在客户端创建Socket时使用如下API：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
    
    
      <category term="TCP" scheme="http://www.html.hb.com/tags/TCP/"/>
    
  </entry>
  
</feed>
